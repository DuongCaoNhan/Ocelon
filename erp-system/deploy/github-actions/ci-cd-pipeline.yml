name: ERP System CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  REGISTRY_NAME: ${{ secrets.AZURE_REGISTRY_NAME }}
  CLUSTER_NAME: ${{ secrets.AKS_CLUSTER_NAME }}
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      hr-service: ${{ steps.changes.outputs.hr-service }}
      inventory-service: ${{ steps.changes.outputs.inventory-service }}
      accounting-service: ${{ steps.changes.outputs.accounting-service }}
      workflow-service: ${{ steps.changes.outputs.workflow-service }}
      notification-service: ${{ steps.changes.outputs.notification-service }}
      infrastructure: ${{ steps.changes.outputs.infrastructure }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            hr-service:
              - 'src/HRService/**'
              - 'tests/**/HRService/**'
            inventory-service:
              - 'src/InventoryService/**'
              - 'tests/**/InventoryService/**'
            accounting-service:
              - 'src/AccountingService/**'
              - 'tests/**/AccountingService/**'
            workflow-service:
              - 'src/WorkflowService/**'
            notification-service:
              - 'src/NotificationService/**'
            infrastructure:
              - 'infrastructure/**'
              - 'deploy/**'

  build-dotnet-services:
    needs: detect-changes
    if: needs.detect-changes.outputs.hr-service == 'true' || needs.detect-changes.outputs.inventory-service == 'true' || needs.detect-changes.outputs.accounting-service == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [HRService, InventoryService, AccountingService]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '10.0.x'
      
      - name: Restore dependencies
        run: dotnet restore src/${{ matrix.service }}/${{ matrix.service }}.sln
      
      - name: Build
        run: dotnet build src/${{ matrix.service }}/${{ matrix.service }}.sln --no-restore --configuration Release
      
      - name: Test
        run: |
          dotnet test tests/unit/${{ matrix.service }}/ --no-build --configuration Release --logger trx --results-directory TestResults
          dotnet test tests/integration/${{ matrix.service }}/ --no-build --configuration Release --logger trx --results-directory TestResults
      
      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: '.NET Tests - ${{ matrix.service }}'
          path: 'TestResults/*.trx'
          reporter: dotnet-trx
      
      - name: Login to Azure
        if: github.ref == 'refs/heads/main'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -f src/${{ matrix.service }}/Dockerfile -t ${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.service | lower }}:${{ github.sha }} .
          az acr login --name ${{ env.REGISTRY_NAME }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/${{ matrix.service | lower }}:${{ github.sha }}

  build-java-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.workflow-service == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Run tests
        run: |
          cd src/WorkflowService
          mvn clean test
      
      - name: Build
        run: |
          cd src/WorkflowService
          mvn clean package -DskipTests
      
      - name: Login to Azure
        if: github.ref == 'refs/heads/main'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          cd src/WorkflowService
          docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/workflowservice:${{ github.sha }} .
          az acr login --name ${{ env.REGISTRY_NAME }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/workflowservice:${{ github.sha }}

  build-node-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.notification-service == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: src/NotificationService/package-lock.json
      
      - name: Install dependencies
        run: |
          cd src/NotificationService
          npm ci
      
      - name: Run linter
        run: |
          cd src/NotificationService
          npm run lint
      
      - name: Run tests
        run: |
          cd src/NotificationService
          npm test -- --coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: src/NotificationService/coverage/lcov.info
          flags: notification-service
      
      - name: Login to Azure
        if: github.ref == 'refs/heads/main'
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          cd src/NotificationService
          docker build -t ${{ env.REGISTRY_NAME }}.azurecr.io/notificationservice:${{ github.sha }} .
          az acr login --name ${{ env.REGISTRY_NAME }}
          docker push ${{ env.REGISTRY_NAME }}.azurecr.io/notificationservice:${{ github.sha }}

  infrastructure-validation:
    needs: detect-changes
    if: needs.detect-changes.outputs.infrastructure == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Validate Bicep templates
        run: |
          az bicep build --file infrastructure/bicep/main.bicep
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
      
      - name: Terraform Format Check
        run: |
          cd infrastructure/terraform
          terraform fmt -check
      
      - name: Terraform Init
        run: |
          cd infrastructure/terraform
          terraform init
      
      - name: Terraform Validate
        run: |
          cd infrastructure/terraform
          terraform validate
      
      - name: Terraform Plan
        if: github.event_name == 'pull_request'
        run: |
          cd infrastructure/terraform
          terraform plan -out=tfplan
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          cd infrastructure/terraform
          terraform apply -auto-approve

  deploy:
    needs: [build-dotnet-services, build-java-service, build-node-service]
    if: github.ref == 'refs/heads/main' && (success() || needs.build-dotnet-services.result == 'skipped' || needs.build-java-service.result == 'skipped' || needs.build-node-service.result == 'skipped')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'
      
      - name: Get AKS credentials
        run: |
          az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }}
      
      - name: Deploy to AKS
        run: |
          # Update Helm charts with new image tags
          sed -i 's|{{IMAGE_TAG}}|${{ github.sha }}|g' infrastructure/helm/erp-system/values.yaml
          
          # Deploy using Helm
          helm upgrade --install erp-system infrastructure/helm/erp-system \
            --namespace erp-system \
            --create-namespace \
            --set global.imageTag=${{ github.sha }} \
            --set global.registryName=${{ env.REGISTRY_NAME }}.azurecr.io \
            --wait --timeout=10m
      
      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          kubectl wait --for=condition=ready pod -l app=hrservice --timeout=300s -n erp-system
          kubectl wait --for=condition=ready pod -l app=inventoryservice --timeout=300s -n erp-system
          kubectl wait --for=condition=ready pod -l app=accountingservice --timeout=300s -n erp-system
          
          # Run basic health checks
          kubectl get pods -n erp-system
          kubectl get services -n erp-system

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  notify:
    needs: [deploy]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment status
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
