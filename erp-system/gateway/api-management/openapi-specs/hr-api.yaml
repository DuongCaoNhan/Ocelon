openapi: 3.0.3
info:
  title: HR Service API Gateway
  description: Human Resources Management Service for ERP System (Gateway Version)
  version: 1.0.0
  contact:
    name: ERP Development Team
    email: dev@erp-system.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.erp-system.com/v1/hr
    description: Production server (via API Gateway)
  - url: https://staging-api.erp-system.com/v1/hr
    description: Staging server (via API Gateway)
  - url: https://dev-api.erp-system.com/v1/hr
    description: Development server (via API Gateway)

security:
  - BearerAuth: []
  - ApiKeyAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from Azure AD or identity provider
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API Key for service-to-service communication

  schemas:
    EmployeeDto:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique employee identifier
        employeeNumber:
          type: string
          description: Employee number
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        email:
          type: string
          format: email
          description: Email address
        department:
          type: string
          description: Department name
        position:
          type: string
          description: Job position
        salary:
          type: number
          format: decimal
          description: Salary amount
        hireDate:
          type: string
          format: date
          description: Date of hire
        status:
          type: string
          enum: [Active, Inactive, Terminated]
          description: Employee status
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    CreateEmployeeDto:
      type: object
      required:
        - firstName
        - lastName
        - email
        - department
        - position
        - salary
        - hireDate
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
        department:
          type: string
          minLength: 1
          maxLength: 100
        position:
          type: string
          minLength: 1
          maxLength: 100
        salary:
          type: number
          format: decimal
          minimum: 0
        hireDate:
          type: string
          format: date

    UpdateEmployeeDto:
      type: object
      properties:
        firstName:
          type: string
          minLength: 1
          maxLength: 50
        lastName:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
        department:
          type: string
          minLength: 1
          maxLength: 100
        position:
          type: string
          minLength: 1
          maxLength: 100
        salary:
          type: number
          format: decimal
          minimum: 0
        status:
          type: string
          enum: [Active, Inactive, Terminated]

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
        details:
          type: string
          description: Detailed error information
        traceId:
          type: string
          description: Request trace ID

    HealthCheck:
      type: object
      properties:
        status:
          type: string
          enum: [Healthy, Degraded, Unhealthy]
        checks:
          type: object
          additionalProperties:
            type: object
            properties:
              status:
                type: string
              description:
                type: string
              data:
                type: object

tags:
  - name: Employees
    description: Employee management operations
  - name: Health
    description: Health check endpoints

paths:
  /employees:
    get:
      tags:
        - Employees
      summary: Get all employees
      description: Retrieve a list of all employees with optional filtering
      parameters:
        - name: department
          in: query
          description: Filter by department
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filter by employee status
          required: false
          schema:
            type: string
            enum: [Active, Inactive, Terminated]
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Employees
      summary: Create a new employee
      description: Create a new employee record
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmployeeDto'
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employees/{id}:
    get:
      tags:
        - Employees
      summary: Get employee by ID
      description: Retrieve a specific employee by their ID
      parameters:
        - name: id
          in: path
          required: true
          description: Employee ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Employees
      summary: Update employee
      description: Update an existing employee record
      parameters:
        - name: id
          in: path
          required: true
          description: Employee ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeDto'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Employees
      summary: Delete employee
      description: Delete an employee record
      parameters:
        - name: id
          in: path
          required: true
          description: Employee ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Employee deleted successfully
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employees/by-email/{email}:
    get:
      tags:
        - Employees
      summary: Get employee by email
      description: Retrieve a specific employee by their email address
      parameters:
        - name: email
          in: path
          required: true
          description: Employee email address
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmployeeDto'
        '404':
          description: Employee not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /employees/by-department/{department}:
    get:
      tags:
        - Employees
      summary: Get employees by department
      description: Retrieve all employees in a specific department
      parameters:
        - name: department
          in: path
          required: true
          description: Department name
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmployeeDto'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Check the health status of the HR service
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'
        '503':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheck'

  /health/ready:
    get:
      tags:
        - Health
      summary: Readiness check
      description: Check if the service is ready to accept requests
      security: []
      responses:
        '200':
          description: Service is ready
        '503':
          description: Service is not ready

  /health/live:
    get:
      tags:
        - Health
      summary: Liveness check
      description: Check if the service is alive
      security: []
      responses:
        '200':
          description: Service is alive
        '503':
          description: Service is not alive
