<!--
    Global API Management Policy
    This policy applies to all APIs and operations in the APIM instance
-->
<policies>
    <inbound>
        <!-- Rate limiting policy - Global limits -->
        <rate-limit calls="1000" renewal-period="60" />
        
        <!-- CORS policy for web applications -->
        <cors allow-credentials="true">
            <allowed-origins>
                <origin>https://erp-portal.com</origin>
                <origin>https://admin.erp-portal.com</origin>
                <origin>https://staging-portal.erp-portal.com</origin>
                <origin>https://dev-portal.erp-portal.com</origin>
                <origin>http://localhost:3000</origin>
                <origin>http://localhost:3001</origin>
                <origin>http://localhost:4200</origin>
            </allowed-origins>
            <allowed-methods preflight-result-max-age="300">
                <method>GET</method>
                <method>POST</method>
                <method>PUT</method>
                <method>DELETE</method>
                <method>PATCH</method>
                <method>OPTIONS</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
            <expose-headers>
                <header>*</header>
            </expose-headers>
        </cors>
        
        <!-- Authentication validation -->
        <choose>
            <!-- Skip authentication for health checks -->
            <when condition="@(context.Request.Url.Path.Contains("/health"))">
                <!-- No authentication required for health endpoints -->
            </when>
            <!-- API Key authentication for service-to-service calls -->
            <when condition="@(context.Request.Headers.ContainsKey("X-API-Key"))">
                <validate-azure-ad-token tenant-id="{{tenant-id}}">
                    <client-application-ids>
                        <application-id>{{service-client-id}}</application-id>
                    </client-application-ids>
                </validate-azure-ad-token>
            </when>
            <!-- JWT Bearer token authentication for user requests -->
            <otherwise>
                <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized">
                    <openid-config url="https://login.microsoftonline.com/{{tenant-id}}/v2.0/.well-known/openid_configuration" />
                    <required-claims>
                        <claim name="aud" match="any">
                            <value>{{client-id}}</value>
                        </claim>
                    </required-claims>
                </validate-jwt>
            </otherwise>
        </choose>
        
        <!-- Request logging -->
        <log-to-eventhub logger-id="erp-event-hub" partition-id="0">
        @{
            return new JObject(
                new JProperty("timestamp", DateTime.UtcNow.ToString()),
                new JProperty("requestId", context.RequestId),
                new JProperty("method", context.Request.Method),
                new JProperty("url", context.Request.Url.ToString()),
                new JProperty("userAgent", context.Request.Headers.GetValueOrDefault("User-Agent", "")),
                new JProperty("clientIp", context.Request.IpAddress),
                new JProperty("userId", context.User?.Id ?? "anonymous")
            ).ToString();
        }
        </log-to-eventhub>
        
        <!-- Add correlation ID if not present -->
        <choose>
            <when condition="@(!context.Request.Headers.ContainsKey("X-Correlation-ID"))">
                <set-header name="X-Correlation-ID" exists-action="skip">
                    <value>@(Guid.NewGuid().ToString())</value>
                </set-header>
            </when>
        </choose>
        
        <!-- Set standard headers for backend services -->
        <set-header name="X-Request-ID" exists-action="override">
            <value>@(context.RequestId)</value>
        </set-header>
        
        <set-header name="X-User-ID" exists-action="override">
            <value>@(context.User?.Id ?? "system")</value>
        </set-header>
        
        <set-header name="X-Client-IP" exists-action="override">
            <value>@(context.Request.IpAddress)</value>
        </set-header>
        
        <!-- Environment-based routing -->
        <set-variable name="environment" value="@(context.Request.Headers.GetValueOrDefault("X-Environment", "prod"))" />
        
        <!-- Security headers -->
        <set-header name="X-Content-Type-Options" exists-action="override">
            <value>nosniff</value>
        </set-header>
        
        <set-header name="X-Frame-Options" exists-action="override">
            <value>DENY</value>
        </set-header>
        
        <set-header name="Strict-Transport-Security" exists-action="override">
            <value>max-age=31536000; includeSubDomains</value>
        </set-header>
    </inbound>
    
    <backend>
        <!-- Retry policy for backend calls -->
        <retry condition="@(context.Response.StatusCode >= 500)" count="3" interval="2" delta="1" max-interval="10">
            <forward-request />
        </retry>
    </backend>
    
    <outbound>
        <!-- Response logging -->
        <log-to-eventhub logger-id="erp-event-hub" partition-id="1">
        @{
            return new JObject(
                new JProperty("timestamp", DateTime.UtcNow.ToString()),
                new JProperty("requestId", context.RequestId),
                new JProperty("statusCode", context.Response.StatusCode),
                new JProperty("responseTime", context.Elapsed.TotalMilliseconds),
                new JProperty("userId", context.User?.Id ?? "anonymous")
            ).ToString();
        }
        </log-to-eventhub>
        
        <!-- Add response correlation ID -->
        <set-header name="X-Correlation-ID" exists-action="override">
            <value>@(context.Request.Headers.GetValueOrDefault("X-Correlation-ID", context.RequestId))</value>
        </set-header>
        
        <!-- Cache control for successful GET requests -->
        <choose>
            <when condition="@(context.Request.Method == "GET" && context.Response.StatusCode == 200)">
                <set-header name="Cache-Control" exists-action="override">
                    <value>public, max-age=300</value>
                </set-header>
            </when>
        </choose>
        
        <!-- API version header -->
        <set-header name="X-API-Version" exists-action="override">
            <value>v1</value>
        </set-header>
        
        <!-- Response transformation for errors -->
        <choose>
            <when condition="@(context.Response.StatusCode >= 400)">
                <set-body>@{
                    var errorResponse = new JObject(
                        new JProperty("error", context.Response.StatusReason),
                        new JProperty("details", "An error occurred while processing your request"),
                        new JProperty("traceId", context.RequestId),
                        new JProperty("timestamp", DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"))
                    );
                    return errorResponse.ToString();
                }</set-body>
                
                <set-header name="Content-Type" exists-action="override">
                    <value>application/json</value>
                </set-header>
            </when>
        </choose>
    </outbound>
    
    <on-error>
        <!-- Error logging -->
        <log-to-eventhub logger-id="erp-event-hub" partition-id="2">
        @{
            return new JObject(
                new JProperty("timestamp", DateTime.UtcNow.ToString()),
                new JProperty("requestId", context.RequestId),
                new JProperty("error", context.LastError?.Message ?? "Unknown error"),
                new JProperty("source", context.LastError?.Source ?? "API Management"),
                new JProperty("userId", context.User?.Id ?? "anonymous")
            ).ToString();
        }
        </log-to-eventhub>
        
        <!-- Standard error response -->
        <set-body>@{
            var errorResponse = new JObject(
                new JProperty("error", "Internal Server Error"),
                new JProperty("details", "An unexpected error occurred. Please contact support if the problem persists."),
                new JProperty("traceId", context.RequestId),
                new JProperty("timestamp", DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"))
            );
            return errorResponse.ToString();
        }</set-body>
        
        <set-header name="Content-Type" exists-action="override">
            <value>application/json</value>
        </set-header>
        
        <set-status code="500" reason="Internal Server Error" />
    </on-error>
</policies>
